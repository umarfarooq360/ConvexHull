#BlueJ class context
comment0.params=xs\ ys
comment0.target=java.util.List\ getConvexHull(int[],\ int[])
comment0.text=\r\n\ Returns\ the\ convex\ hull\ of\ the\ points\ created\ from\ xs\ and\ ys\ which\ are\ arrays\r\n\ containing\ respective\ coordinates.\ Note\ that\ the\ first\ and\ last\ point\ in\ the\ returned\r\n\ List\ are\ the\ same\ point.\r\n\r\n\ @param\ xs\ the\ x\ coordinates.\r\n\ @param\ ys\ the\ y\ coordinates.\r\n\ @return\ \ \ the\ convex\ hull\ of\ the\ points\ created\ from\ xs\ and\ ys.\r\n\r\n
comment1.params=points
comment1.target=java.util.ArrayList\ getConvexHull(java.util.List)
comment1.text=\r\n\ Returns\ the\ convex\ hull\ of\ the\ points\ created\ from\ the\ list\ points.\ Note\ that\ the\ \r\n\ first\ and\ last\ point\ in\ the\ returned\ List\ are\ the\ same\ point.\r\n\r\n\ @param\ points\ the\ list\ of\ points.\r\n\ @return\ \ \ \ \ \ \ the\ convex\ hull\ of\ the\ points\ created\ from\ the\ list\ points.\r\n\ \r\n
comment2.params=points
comment2.target=java.awt.Point\ getLowestPoint(java.util.List)
comment2.text=\r\n\ Returns\ the\ points\ with\ the\ lowest\ y\ coordinate.\ In\ case\ more\ than\ 1\ such\r\n\ point\ exists,\ the\ one\ with\ the\ lowest\ x\ coordinate\ is\ returned.\r\n\r\n\ @param\ points\ the\ list\ of\ points.\r\n\ @return\ \ \ \ \ \ \ the\ points\ with\ the\ lowest\ y\ coordinate.\ In\ case\ more\ than\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 1\ such\ point\ exists,\ the\ one\ with\ the\ lowest\ x\ coordinate\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ returned.\r\n
comment3.params=points
comment3.target=java.util.Set\ getSortedPoints(java.util.List)
comment3.text=\r\n\ This\ method\ returns\ a\ radially\ sorted\ set\ of\ points\ from\ the\ listed\ points.\ The\ set\ of\ points\ are\ \r\n\ sorted\ in\ increasing\ order\ of\ the\ angle\ they\ and\ the\ lowest\ point\ P\ make\ with\ the\ x-axis.\ If\ two\ or\ more\ points\r\n\ form\ the\ same\ angle,\ then\ the\ one\ closest\ to\ the\ lowest\ point\ comes\ first.\r\n\r\n\ @param\ points\ the\ list\ of\ points\ to\ sort.\r\n\ @return\ a\ radially\ sorted\ set\ of\ points\ from\ the\ list\ points.\r\n
comment4.params=a\ b
comment4.target=int\ compare(java.awt.Point,\ java.awt.Point)
comment5.params=a\ b\ c
comment5.target=GrahamScan.Turn\ getTurn(java.awt.Point,\ java.awt.Point,\ java.awt.Point)
comment5.text=\r\n\ Check\ whether\ three\ points\ make\ a\ left(counter\ clockwise\ turn)\ or\ not.\ More\ specifically,\ the\ cross\ product\ between\ the\r\n\ 3\ points\ (vectors)\ is\ calculated\:\r\n\ (b.x-a.x\ *\ c.y-a.y)\ -\ (b.y-a.y\ *\ c.x-a.x)\r\n\r\n\ If\ C\ is\ less\ than\ 0,\ the\ turn\ is\ left\ or\ clockwise,\ if\ C\ is\ more\ than\ 0,\ the\ turn\ is\ right\ or\ counter\ clockwise,\ else\r\n\ the\ three\ points\ are\ collinear.\r\n\r\n\ @param\ a\ the\ starting\ point.\r\n\ @param\ b\ the\ second\ point.\r\n\ @param\ c\ the\ end\ point.\r\n\ @return\ the\ direction\ of\ the\ turn,\ CLOCKWISE,\ COUNTER_CLOCKWISE\ OR\ COLLINEAR.\ \ \ \ \ \ \ \ \r\n
comment6.params=a\ b\ c
comment6.target=double\ getTurnValue(java.awt.Point,\ java.awt.Point,\ java.awt.Point)
comment6.text=\r\n\ Check\ whether\ three\ points\ make\ a\ left(counter\ clockwise\ turn)\ or\ not.\ More\ specifically,\ the\ cross\ product\ between\ the\r\n\ 3\ points\ (vectors)\ is\ calculated\:\r\n\ (b.x-a.x\ *\ c.y-a.y)\ -\ (b.y-a.y\ *\ c.x-a.x)\r\n\r\n\ If\ C\ is\ less\ than\ 0,\ the\ turn\ is\ left\ or\ clockwise,\ if\ C\ is\ more\ than\ 0,\ the\ turn\ is\ right\ or\ counter\ clockwise,\ else\r\n\ the\ three\ points\ are\ collinear.\r\n\r\n\ @param\ a\ the\ starting\ point.\r\n\ @param\ b\ the\ second\ point.\r\n\ @param\ c\ the\ end\ point.\r\n\ @return\ the\ cross\ product\ or\ Ca(b,c)\ \ where\ C\ is\ the\ comparator\ function\ that\ checks\ for\ left\ turns.\ \ \ \ \ \ \ \ \r\n
comment7.params=
comment7.target=java.util.List\ TESTER()
comment7.text=\r\n\ This\ is\ a\ tester\ method.\r\n
comment8.params=points
comment8.target=boolean\ areAllCollinear(java.util.List)
comment8.text=\r\n\ Returns\ true\ if\ all\ points\ in\ points\ are\ collinear.\ This\ is\ a\ helper\ method.\r\n\r\n\ @param\ points\ the\ list\ of\ points.\r\n\ @return\ \ \ \ \ \ \ true\ iff\ all\ points\ in\ points\ are\ collinear.\r\n
numComments=9
